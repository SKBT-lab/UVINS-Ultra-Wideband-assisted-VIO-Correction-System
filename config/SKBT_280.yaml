%YAML:1.0

#common parameters
#support: 1 imu 1 cam; 1 imu 2 cam: 2 cam; 
imu: 1         
num_of_cam: 2


imu_topic: "/mavros/imu/data_raw"
image0_topic: "/camera/infra1/image_rect_raw"
image1_topic: "/camera/infra2/image_rect_raw"
uwb_topic: "/UWB_module/distance"




output_path: "/home/skbt/vins_output"

cam0_calib: "left.yaml"
cam1_calib: "right.yaml"
uwb_calib: "uwb.yaml"
image_width: 640
image_height: 480
   
# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 1   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.

body_T_cam0: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [ -1.7165701157599411e-02, -7.9080444233025626e-03, 9.9982138481689176e-01, 1.2023074672055490e-01,
       -9.9960341590191359e-01, 2.2462070310709903e-02, -1.6984296116792141e-02, 1.5809010510553934e-02,
       -2.2323745675718321e-02, -9.9971641890625973e-01, -8.2904854049721255e-03, -9.3554940386910548e-02, 
       0., 0., 0., 1. ]
body_T_cam1: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [ -1.6879365660079859e-02, -7.9601480597882301e-03, 9.9982584636414540e-01, 1.2020765680190926e-01,
       -9.9961021546408801e-01, 2.2374261238446214e-02, -1.6697591858515271e-02, -3.2588879654810790e-02,
       -2.2237449376066365e-02, -9.9971797446925015e-01, -8.3347086539888871e-03, -9.4499633016625520e-02, 
       0., 0., 0., 1. ]
multiple_thread: 1

# body_T_cam0: !!opencv-matrix
#    rows: 4
#    cols: 4
#    dt: d
#    data: [ 0.0, -1.0, 0.0, 1.5809010510553934e-02,
#            0.0, 0.0, -1.0, -9.3554940386910548e-02,
#            1.0, 0.0, 0.0, -1.2023074672055490e-01,
#             0., 0., 0., 1. ]
# body_T_cam1: !!opencv-matrix
#    rows: 4
#    cols: 4
#    dt: d
#    data: [ 0.0, -1.0, 0.0, -3.2588879654810790e-02,
#            0.0, 0.0, -1.0, -9.4499633016625520e-02,
#            1.0, 0.0, 0.0, -1.2020765680190926e-01,
#             0., 0., 0., 1. ]
# multiple_thread: 1

#feature traker paprameters
max_cnt: 150            # max feature number in feature tracking
min_dist: 30            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
flow_back: 1            # perform forward and backward optical flow to improve feature tracking accuracy

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.1          # accelerometer measurement noise standard deviation. #0.2   0.04
gyr_n: 0.01         # gyroscope measurement noise standard deviation.     #0.05  0.004
acc_w: 0.001         # accelerometer bias random work noise standard deviation.  #0.002
gyr_w: 0.0001       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.805         # gravity magnitude

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
td: -0.05                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#loop closure parameters
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/fast/savedfiles/output/pose_graph/" # save and load path
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 

